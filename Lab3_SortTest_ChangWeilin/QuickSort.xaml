<!--  QuickSort.xaml for QuickSort.xaml.cs
      @author: CHANG WEI-LIN
      @Last Modify: 4/9/2023
      @About: This program is the main window of the Quick Sort Algorithms Test Application with C# WPF.
    -->

<Window x:Class="Lab3_SortTest_ChangWeilin.QuickSort"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:sys="clr-namespace:System;assembly=mscorlib" 
        xmlns:local="clr-namespace:Lab3_SortTest_ChangWeilin" 
        xmlns:oxy="http://oxyplot.org/wpf"
        
        mc:Ignorable="d" Title="快速排序 Quick Sort" HorizontalAlignment="Center" 
        VerticalAlignment="Center" MinWidth="800" MinHeight="450" 
        MaxWidth="800" MaxHeight="450" FontSize="16" ResizeMode="NoResize" 
        WindowStartupLocation="CenterOwner" Background="#FFD4D4D4"
        Width="800" Height="450" Icon="/quicksorticon.jpg">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Orientation="Horizontal">
            <Button x:Name="btnReadFile" Content="Read File" Width="100" Height="40" Margin="10" Click="ReadFile_Click"/>
            <ComboBox x:Name="cbDataSelection" Width="150" Height="40" Margin="10" SelectionChanged="DataSelectionChanged">
                <ComboBoxItem Content="Read 10 data"/>
                <ComboBoxItem Content="Read 100 data"/>
                <ComboBoxItem Content="Read 1,000 data"/>
                <ComboBoxItem Content="Read 10,000 data"/>
                <ComboBoxItem Content="Read 100,000 data"/>
                <ComboBoxItem Content="Read 1,000,000 data"/>
                <ComboBoxItem Content="Read all data"/>
            </ComboBox>
            <Button x:Name="btnStart" Content="Start" Width="100" Height="40" Margin="10" Click="Start_Click"/>
            <TextBlock x:Name="txtInformation" Width="285" TextWrapping="Wrap" Margin="10"/>
        </StackPanel>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="400*"/>
                <ColumnDefinition Width="70*"/>
                <ColumnDefinition Width="330*"/>
            </Grid.ColumnDefinitions>

            <TextBox x:Name="txtData" Grid.Column="2" HorizontalScrollBarVisibility="Auto" 
                     VerticalScrollBarVisibility="Auto" AcceptsReturn="True" IsReadOnly="True" Margin="30,10,12,12" TextChanged="TxtData_TextChanged" 
                     TextWrapping="Wrap" Text="快速排序（Quick Sort）是一种基于分治思想的高效排序算法。通过将问题划分为较小的子问题，并递归地解决这些子问题，然后合并子问题的解以得到原问题的解。&#xD;&#xA;&#xD;&#xA;快速排序的基本步骤：&#xD;&#xA;（1）选择基准值（Pivot）：从待排序数组中选择一个元素作为基准值。通常选择第一个元素、最后一个元素或者中间元素。&#xD;&#xA;（2）分区（Partitioning）：将数组中的元素按照与基准值的大小关系进行分区。小于基准值的元素放在基准值的左侧，大于基准值的元素放在基准值的右侧。分区完成后，基准值所在的位置即为其在已排序数组中的最终位置。&#xD;&#xA;（3）递归：对基准值左侧和右侧的两个子数组分别进行快速排序。重复执行上述两个步骤，直到所有子数组都已排序。&#xD;&#xA;&#xD;&#xA;快速排序的平均时间复杂度为O(nlogn)。在最佳情况下，每次都能选择到中位数作为基准值，此时时间复杂度为O(nlogn)。&#xD;&#xA;&#xD;&#xA;在最差情况下，每次都选择到最小值或最大值作为基准值，此时时间复杂度为O(n^2)。&#xD;&#xA;&#xD;&#xA;通过一些优化方法（例如随机选择基准值或使用三数取中法）可以降低最差情况出现的概率，使得快速排序在实际应用中具有更好的性能，因此对绝大部分排序需求，使用快速排序往往是最好的解决方法。"/>
            <oxy:PlotView HorizontalAlignment="Left" VerticalAlignment="Center" 
                          x:Name="plotView" MouseMove="PlotView_MouseMove" 
                          Height="340" Width="450" Grid.ColumnSpan="2" Margin="10,0,0,0"/>

            <Image Source="/shamrock.png" Margin="240,-55,10,345" Grid.Column="2"/>
        </Grid>
    </Grid>
</Window>

<!-- Program Over -->